% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/simulation.R
\name{simulate_timecourse}
\alias{simulate_timecourse}
\title{Simulate Full Metabolic Time-courses}
\usage{
simulate_timecourse(n.trends, p, param, n.samples = 10, n.experiments = 1)
}
\arguments{
\item{n.trends}{Number of trends to generate per "experiment" i.e. number
of metabolites.}

\item{p}{A vector of fractions representing the proportions of decreasing,
increasing, and concave trends (in that order). If the fractions
don't sum to one, the remainder of the trends are assumed to be
linear (undetermined). Note that floor() will be applied to convert
final numbers to integers.}

\item{param}{A list of parameters to be fed into the simulation of various
time-course components. Parameters must be specified for
maximum concentration, relative changes in concentration,
measurement standard deviations, and the trends themselves.
Each component has a qualifier (max, change, sd, trend) that is
appended to the name of the argument used in the function
e.g. max.par1 is used to set par1 for simulating maximum
concentrations. To specify different parameters for each type
of trend, append trend qualifier e.g. max.par1.decreasing can
be used to set the maximum concentrations of only decreasing
trends, with max.par1 used for all other trends.}

\item{n.samples}{Number of timepoints within each trend.}

\item{n.experiments}{Number of "experiments".}
}
\value{
A "long" dataframe with the following columns: experiment,
        metabolite, sample, concentration.
}
\description{
Combines various simulating functions to generate "experiments" composed
of multiple trends based on provided parameters. This function is meant
as a template for custom simulations.
}
\examples{
# Constructing realistic list of parameters
param <- list(
  # Maximum concentrations are the same for every trend type
  p.max = 0.3,
  par1.max = c(7, 2),
  par2.max = c(0.5, 2),
  con.max = c(0, 50),

  # Global change parameters are near 100\% for increasing/concave trends
  par1.change = c(5, 0.1),
  con.change = c(0.5, 1),

  # Decreasing trends can have a wide variety of changes
  p.change.decreasing = 0.7,
  par1.change.decreasing = c(2, 5),
  par2.change.decreasing = c(0.5, 0.5),
  con.change.decreasing = c(0.1, 1),

  # Linear trends are characterized by relatively small changes
  par1.change.linear = c(1, 5),
  con.change.linear = c(0, 0.1),

  # Measurement error is the same for every trend type (but no more than 20\%)
  p.sd = 0.7,
  par1.sd = c(0.04, 0.02),
  par2.sd = c(0.11, 0.02),
  con.sd = c(0, 0.20),

  # Decreasing trend specification
  p.trend.decreasing = 0.05,
  par1.trend.decreasing = c(0.2, 0.6, 0.10, 0.18),
  par2.trend.decreasing = c(0.6, 0.9, 0.10, 0.18),

  # Increasing trend specification
  p.trend.increasing = 0.15,
  par1.trend.increasing = c(0.045, 0.055, 0.2, 0.4),
  par2.trend.increasing = c(0.945, 0.955, 0.1, 0.3),

  # Concave trend specification
  par1.trend.concave = c(3.5, 4.5, 2.5, 3.5, 0.0, 0.2, 0.8, 0.9),

  # Linear trends are equaly split between increasing and decreasing
  p.trend.linear = 0.5
)

# Generating trends
timecourse <- simulate_timecourse(10, c(0.3, 0.3, 0.3), param)

# Plotting
par(mfrow = c(5, 2), oma = c(5, 4, 1, 1) + 0.1, mar = c(1, 1, 1, 1) + 0.1)

for (metabolite in unique(timecourse$metabolite)) {
  logic <- timecourse$metabolite == metabolite
  plot(timecourse$sample[logic], timecourse$concentration[logic],
       xlab='', ylab='')
}

title(xlab = 'Sample', ylab = 'Concentration', outer = TRUE, line = 3)
}

